package myrobots;

import robocode.*;
import java.awt.Color;

public class AdvancedBot extends AdvancedRobot {

    @Override
    public void run() {
        setColors(Color.CYAN, Color.CYAN, Color.CYAN); // Corpo, Arma, Radar
        setAdjustRadarForRobotTurn(true);
        setAdjustGunForRobotTurn(true);
        setAdjustRadarForGunTurn(true);
        
        while (true) {
            turnRadarRight(360); // Gire o radar continuamente
        }
    }

    @Override
    public void onScannedRobot(ScannedRobotEvent event) {
        double absoluteBearing = getHeading() + event.getBearing();
        double bearingFromGun = normalRelativeAngleDegrees(absoluteBearing - getGunHeading());
        double bearingFromRadar = normalRelativeAngleDegrees(absoluteBearing - getRadarHeading());

        // Trave o radar no inimigo
        setTurnRadarRight(bearingFromRadar);

        // Mira no inimigo
        setTurnGunRight(bearingFromGun);

        // Atira se a arma estiver alinhada
        if (Math.abs(bearingFromGun) <= 10) {
            setFire(Math.min(400 / event.getDistance(), 3));
        }

        // Movimentação para dificultar ser acertado
        if (event.getDistance() < 100) {
            setBack(50);
        } else {
            setAhead(50);
        }
        
        execute();
    }

    @Override
    public void onHitByBullet(HitByBulletEvent event) {
        setTurnRight(90 - event.getBearing());
        setAhead(100);
        execute();
    }

    @Override
    public void onHitWall(HitWallEvent event) {
        setTurnRight(90 - event.getBearing());
        setAhead(100);
        execute();
    }

    /**
     * Normaliza um ângulo para que fique entre -180 e 180 graus.
     */
    public double normalRelativeAngleDegrees(double angle) {
        while (angle > 180) {
            angle -= 360;
        }
        while (angle < -180) {
            angle += 360;
        }
        return angle;
    }
}
